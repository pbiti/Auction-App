{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","bid_input","highestbid","highestbidder","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","AuctionContract","networks","instance","Contract","abi","address","methods","highestBid","call","highest_bid","highestBidder","highest_bidder","setState","alert","error","bid","send","from","value","withdraw","ChangeBid","event","target","this","className","type","placeholder","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4dd76254.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\n//bid_input: the input value the current address wants to bid\n\nclass App extends Component {\n  state = { web3: null, accounts: null, contract: null, bid_input: null, highestbid: null, highestbidder: null};\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = AuctionContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        AuctionContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n      /*check for the highest bid and bidder and print it\n      *******************************************************************************/\n      const highest_bid = await instance.methods.highestBid().call();\n    \n      const highest_bidder = await await instance.methods.highestBidder().call();\n    \n      this.setState({ highestbid: highest_bid, highestbidder: highest_bidder });\n      /*******************************************************************************/\n      \n      this.setState({ web3, accounts, contract: instance });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  bid = async () => {\n    const { accounts, contract } = this.state;\n    \n    //bid the input value from current account\n    await contract.methods.bid().send({from: accounts[0] , value: this.state.bid_input});\n    \n    //store the current highest bid\n    const highest_bid = await contract.methods.highestBid().call();\n    \n    //store current highest bidder\n    const highest_bidder = await await contract.methods.highestBidder().call();\n    \n    //update the state variables\n    this.setState({ highestbid: highest_bid, highestbidder: highest_bidder });\n\n   };\n   \n   withdraw = async () => {\n    const { accounts, contract } = this.state;\n    \n    //bid the input value from current account\n    await contract.methods.withdraw().send({from: accounts[0]});\n    \n    //store the current highest bid\n    const highest_bid = await contract.methods.highestBid().call();\n    \n    //store current highest bidder\n    const highest_bidder = await await contract.methods.highestBidder().call();\n    \n    //update the state variables\n    this.setState({ highestbid: highest_bid, highestbidder: highest_bidder});\n\n   };\n   \n    \n  ChangeBid = (event) => {\n      this.setState({bid_input: event.target.value}, () => {\n    });\n  }\n  \n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Auction</h1>\n        \n        <h3>Bid:</h3>\n        <div><input type=\"number\" placeholder=\"Value you would like to bid\" onChange={this.ChangeBid} />\n        \n        <button onClick = {this.bid}>Bid</button></div>\n        \n        <h3>Withdraw:</h3>\n        <div><button onClick = {this.withdraw}>Withdraw</button></div>\n        \n        <h3>Auction Info:</h3>\n        <div>Current highest bid:<b>{this.state.highestbid}</b></div>\n        <div>Current highest bidder:<b>{this.state.highestbidder}</b></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}